// Clear previous collections
Clear(colSections);
Clear(colLines);
//Clear(colVariables);

// Step 1: Split the file into sections using the separator
ClearCollect(
    colSections,
    Filter(
        Split(terraformFile, "# --------------------------------------------------------- #"),
        !IsBlank(Trim(Value))
    )
);
ClearCollect(
    colSectionsIndexed,
    ForAll(
        Sequence(CountRows(colSections)),
        Patch(
            Last(FirstN(colSections, Value)),
            {
                Index: Value
            }
        )
    )
);
// Step 2: Process each section separately
ForAll(
    colSectionsIndexed As currentSection,
    With(
        {
            // Split the section into lines and index them
            sectionLines: Filter(
                Split(currentSection.Value, Char(10)),
                !IsBlank(Trim(Value))
            )
        },
        Collect(
            colLines,
            ForAll(
                Sequence(CountRows(sectionLines)),
                {
                    SectionIndex: currentSection.Index, // Index of the section
                    LineNumber: CountRows(colLines) + 1, // Global line number
                    SectionLineNumber: Value, // Line number within the section
                    Value: Trim(
                        Last(
                            FirstN(
                                sectionLines,
                                Value
                            )
                        ).Value
                    )
                }
            )
        )
    )
);

// Step 3: Identify variable start lines and extract variable names
ClearCollect(
    colVariableStarts,
    AddColumns(
        Filter(
            colLines,
            StartsWith(Value, "variable ")
        ),
        VariableName,
        // Extract the variable name between the first pair of double quotes
        Mid(
            Value,
            Find("""", Value) + 1,
            Find("""", Value, Find("""", Value) + 1) - Find("""", Value) - 1
        ),
        StartLineNumber,
        LineNumber
    )
);

// Step 4: Number the variables for indexing
ClearCollect(
    colVariableStartsNumbered,
    AddColumns(
        colVariableStarts,
        Index,
        CountRows(
            Filter(
                colVariableStarts,
                LineNumber <= ThisRecord.LineNumber
            )
        )
    )
);

// Step 5: Determine variable end lines within the same section
ClearCollect(
    colVariableDefinitions,
    ForAll(
        colVariableStartsNumbered As varStart,
        With(
            {
                // Find the next variable in the same section
                nextVarInSection: First(
                    Sort(
                        Filter(
                            colVariableStartsNumbered,
                            SectionIndex = varStart.SectionIndex,
                            LineNumber > varStart.LineNumber
                        ),
                        LineNumber,
                        SortOrder.Ascending
                    )
                ),
                varEndLineNumber: If(
                    !IsBlank(First( Sort( Filter( colVariableStartsNumbered, SectionIndex = varStart.SectionIndex, LineNumber > varStart.LineNumber ), LineNumber, SortOrder.Ascending ) ).VariableName),
                    First( Sort( Filter( colVariableStartsNumbered, SectionIndex = varStart.SectionIndex, LineNumber > varStart.LineNumber ), LineNumber, SortOrder.Ascending ) ).StartLineNumber - 1,
                    // End at the end of the section
                    Max(
                        Filter(
                            colLines,
                            SectionIndex = varStart.SectionIndex
                        ),
                        LineNumber
                    )
                )
            },
            {
                VariableName: varStart.VariableName,
                StartLineNumber: varStart.StartLineNumber,
                EndLineNumber: varEndLineNumber,
                SectionIndex: varStart.SectionIndex
            }
        )
    )
);

// Step 6: Extract variable details
ClearCollect(
    colVariables,
    ForAll(
        colVariableDefinitions As varDef,
        With(
            {
                varLines: Filter(
                    colLines,
                    LineNumber >= varDef.StartLineNumber && LineNumber <= varDef.EndLineNumber
                ),
                typeLines: Filter( colLines, LineNumber >= varDef.StartLineNumber && LineNumber <= varDef.EndLineNumber ,
                    StartsWith(Value, "type") || // Start of type definition
                    (First(LastN(Split(Value, ""), 1)).Value <> "{" && First(LastN(Split(Value, ""), 1)).Value <> "}") // Continuation lines
                ),
                defaultLines: Filter(
                     colLines, LineNumber >= varDef.StartLineNumber && LineNumber <= varDef.EndLineNumber ,
                    StartsWith(Value, "default") || // Start of default definition
                    (First(LastN(Split(Value, ""), 1)).Value <> "{" && First(LastN(Split(Value, ""), 1)).Value <> "}") // Continuation lines
                ),
                descriptionLine: First(
                    Filter(
                        colLines,LineNumber >= varDef.StartLineNumber && LineNumber <= varDef.EndLineNumber,
                        StartsWith(Value, "description")
                    )
                ),
                // Concatenate the type lines
                typeValue: Concat(
                    Filter( colLines, LineNumber >= varDef.StartLineNumber && LineNumber <= varDef.EndLineNumber ,
                    StartsWith(Value, "type") || // Start of type definition
                    (First(LastN(Split(Value, ""), 1)).Value <> "{" && First(LastN(Split(Value, ""), 1)).Value <> "}") // Continuation lines
                ),
                    Value & Char(10)
                ),
                // Concatenate the default lines
                defaultValue: Concat(
                    Filter(
                     colLines, LineNumber >= varDef.StartLineNumber && LineNumber <= varDef.EndLineNumber ,
                    StartsWith(Value, "default") || // Start of default definition
                    (First(LastN(Split(Value, ""), 1)).Value <> "{" && First(LastN(Split(Value, ""), 1)).Value <> "}") // Continuation lines
                ),
                    Value & Char(10)
                )
            },
            {
                VariableName: varDef.VariableName,
                Type: If(
                    !IsBlank(typeValue),
                    // Extract the type value after '='
                    Trim(
                        Mid(
                            typeValue,
                            Find("=", typeValue) + 1,
                            Len(typeValue)
                        )
                    ),
                    ""
                ),
                Default: If(
                    !IsBlank(defaultValue),
                    // Extract the default value after '='
                    Trim(
                        Mid(
                            defaultValue,
                            Find("=", defaultValue) + 1,
                            Len(defaultValue)
                        )
                    ),
                    ""
                ),
                Description: If(
                    !IsBlank(descriptionLine.Value),
                    Trim(
                        Mid(
                            descriptionLine.Value,
                            Find("=", descriptionLine.Value) + 1,
                            Len(descriptionLine.Value)
                        )
                    ),
                    ""
                ),
                SectionIndex: varDef.SectionIndex
            }
        )
    )
);
